import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as d,f as r}from"./app-7fdc7960.js";const c={},h=r('<h1 id="值编号-value-numbering" tabindex="-1"><a class="header-anchor" href="#值编号-value-numbering" aria-hidden="true">#</a> 值编号（Value Numbering）</h1><p><strong>值编号</strong>是一种简单的表达式优化技术，它通过在程序中识别出相同的表达式，然后将它们替换为同一个临时变量来消除冗余的计算。</p><p>这种技术的基本思想是，如果两个表达式的值相同，那么它们就可以用同一个临时变量来表示。例如，对于表达式<code>a+b</code>和<code>c+d</code>，如果<code>a=c</code>且<code>b=d</code>，那么这两个表达式的值就相同，可以用同一个临时变量来表示。这样我们通过对每个表达式都进行标号，就可以追踪每个表达式的值，从而消除冗余的计算。</p><h2 id="值编号的基本原理" tabindex="-1"><a class="header-anchor" href="#值编号的基本原理" aria-hidden="true">#</a> 值编号的基本原理</h2><h2 id="一个直观的例子" tabindex="-1"><a class="header-anchor" href="#一个直观的例子" aria-hidden="true">#</a> 一个直观的例子</h2><h2 id="在不同代码层级应该值编号技术" tabindex="-1"><a class="header-anchor" href="#在不同代码层级应该值编号技术" aria-hidden="true">#</a> 在不同代码层级应该值编号技术</h2><h3 id="basic-block" tabindex="-1"><a class="header-anchor" href="#basic-block" aria-hidden="true">#</a> Basic Block</h3><h3 id="extended-basic-block" tabindex="-1"><a class="header-anchor" href="#extended-basic-block" aria-hidden="true">#</a> Extended Basic Block</h3><h3 id="region" tabindex="-1"><a class="header-anchor" href="#region" aria-hidden="true">#</a> Region</h3><h3 id="global" tabindex="-1"><a class="header-anchor" href="#global" aria-hidden="true">#</a> Global</h3>',10),i=[h];function n(o,t){return a(),d("div",null,i)}const b=e(c,[["render",n],["__file","(1)值编号.html.vue"]]);export{b as default};
