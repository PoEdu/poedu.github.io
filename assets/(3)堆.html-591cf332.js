const t=JSON.parse('{"key":"v-563891d6","path":"/%E8%BF%90%E8%A1%8C%E6%97%B6%E7%8E%AF%E5%A2%83/1.%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/(3)%E5%A0%86.html","title":"堆（Heap）","lang":"zh-CN","frontmatter":{"description":"堆（Heapsbrk与mmap 运行时堆一般是通过调用malloc向上（高地址）增长，如上图所示具体是通过sbrk函数移动内核中的一个叫做brk的指针来控制堆的。但是在实际的Linux中并不是所有通过malloc申请的动态内存都是通过sbrk增长堆来申请空间的。具体策略是： 当malloc申请的内存小于128KB时，是通过sbrk增长运行时堆来获取内存...","head":[["meta",{"property":"og:url","content":"https://PoIndex.github.io/%E8%BF%90%E8%A1%8C%E6%97%B6%E7%8E%AF%E5%A2%83/1.%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/(3)%E5%A0%86.html"}],["meta",{"property":"og:site_name","content":"现代黑魔法学院"}],["meta",{"property":"og:title","content":"堆（Heap）"}],["meta",{"property":"og:description","content":"堆（Heapsbrk与mmap 运行时堆一般是通过调用malloc向上（高地址）增长，如上图所示具体是通过sbrk函数移动内核中的一个叫做brk的指针来控制堆的。但是在实际的Linux中并不是所有通过malloc申请的动态内存都是通过sbrk增长堆来申请空间的。具体策略是： 当malloc申请的内存小于128KB时，是通过sbrk增长运行时堆来获取内存..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-27T03:31:43.000Z"}],["meta",{"property":"article:author","content":"西风逍遥游"}],["meta",{"property":"article:modified_time","content":"2023-11-27T03:31:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"堆（Heap）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-27T03:31:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"西风逍遥游\\",\\"url\\":\\"https://github.com/sunxfancy\\"}]}"]]},"headers":[{"level":2,"title":"sbrk与mmap","slug":"sbrk与mmap","link":"#sbrk与mmap","children":[]}],"git":{"createdTime":1701055903000,"updatedTime":1701055903000,"contributors":[{"name":"西风逍遥游","email":"sunxfancy@gmail.com","commits":1}]},"readingTime":{"minutes":1.08,"words":324},"filePathRelative":"运行时环境/1.内存布局/(3)堆.md","localizedDate":"2023年11月27日","autoDesc":true}');export{t as data};
