import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as n,f as e}from"./app-7fdc7960.js";const t={},o=e(`<h1 id="堆-heap" tabindex="-1"><a class="header-anchor" href="#堆-heap" aria-hidden="true">#</a> 堆（Heap）</h1><h2 id="sbrk与mmap" tabindex="-1"><a class="header-anchor" href="#sbrk与mmap" aria-hidden="true">#</a> sbrk与mmap</h2><p>运行时堆一般是通过调用malloc向上（高地址）增长，如上图所示具体是通过sbrk函数移动内核中的一个叫做brk的指针来控制堆的。但是在实际的Linux中并不是所有通过malloc申请的动态内存都是通过sbrk增长堆来申请空间的。具体策略是：</p><p>当malloc申请的内存小于128KB时，是通过sbrk增长运行时堆来获取内存空间的。 当malloc申请的内存大于128KB时，是通过mmap函数进行系统映射获取内存空间的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> start<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> prot<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>mmap函数要求内核创建一个新的虚拟存储器区域，最好是从地址start开始的一个区域，并将文件描述符fd指定的对象的一个连续的片（chunk）映射到这个新的区域。连续的对象片大小为length字节，从距离文件开始处偏移量为offset字节的地方开始。start地址仅仅是一个暗示，通常被定义为NULL。自Linux内核2.6开始，在32位系统上，一般是从靠近3GB地址处的用户栈的下方开始往下（低地址）映射。</p>`,6),p=[o];function c(l,r){return s(),n("div",null,p)}const k=a(t,[["render",c],["__file","(3)堆.html.vue"]]);export{k as default};
