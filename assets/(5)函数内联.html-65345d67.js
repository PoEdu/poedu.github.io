import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as r,f as i}from"./app-7fdc7960.js";const n={},h=i('<h1 id="函数内联-inlining" tabindex="-1"><a class="header-anchor" href="#函数内联-inlining" aria-hidden="true">#</a> 函数内联（Inlining）</h1><p>函数内联是一种代码重构技术，它可以减少函数调用的开销，提高程序的运行效率。函数内联的原理是将函数调用处的代码替换为被调用函数的实现代码。函数内联的优点是可以减少函数调用的开销，缺点是会增加代码的体积。</p><h2 id="直观感受函数内联" tabindex="-1"><a class="header-anchor" href="#直观感受函数内联" aria-hidden="true">#</a> 直观感受函数内联</h2><h2 id="递归函数的内联" tabindex="-1"><a class="header-anchor" href="#递归函数的内联" aria-hidden="true">#</a> 递归函数的内联</h2><h2 id="我们应该在哪个阶段进行函数内联" tabindex="-1"><a class="header-anchor" href="#我们应该在哪个阶段进行函数内联" aria-hidden="true">#</a> 我们应该在哪个阶段进行函数内联？</h2><h2 id="如何判断一个函数调用是否应该内联" tabindex="-1"><a class="header-anchor" href="#如何判断一个函数调用是否应该内联" aria-hidden="true">#</a> 如何判断一个函数调用是否应该内联？</h2>',6),d=[h];function t(c,s){return e(),r("div",null,d)}const l=a(n,[["render",t],["__file","(5)函数内联.html.vue"]]);export{l as default};
