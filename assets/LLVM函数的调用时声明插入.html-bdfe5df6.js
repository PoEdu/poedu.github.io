const t=JSON.parse('{"key":"v-2c17167f","path":"/LLVM%E6%8C%87%E5%8D%97/LLVM%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E6%97%B6%E5%A3%B0%E6%98%8E%E6%8F%92%E5%85%A5.html","title":"LLVM函数的调用时声明插入","lang":"zh-CN","frontmatter":{"description":"LLVM函数的调用时声明插如果调用一个未声明的函数，我们知道肯定是不正确的，但符号表中，可能预先存有该函数的\\tFunctionType，这时即使未扫描到该函数，我们也可以用Module中的getOrInsertFunction方法，获取或插入一个函数。 Constant * Module::getOrInsertFunction ( StringRef...","head":[["meta",{"property":"og:url","content":"https://PoIndex.github.io/LLVM%E6%8C%87%E5%8D%97/LLVM%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E6%97%B6%E5%A3%B0%E6%98%8E%E6%8F%92%E5%85%A5.html"}],["meta",{"property":"og:site_name","content":"现代黑魔法学院"}],["meta",{"property":"og:title","content":"LLVM函数的调用时声明插入"}],["meta",{"property":"og:description","content":"LLVM函数的调用时声明插如果调用一个未声明的函数，我们知道肯定是不正确的，但符号表中，可能预先存有该函数的\\tFunctionType，这时即使未扫描到该函数，我们也可以用Module中的getOrInsertFunction方法，获取或插入一个函数。 Constant * Module::getOrInsertFunction ( StringRef..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-03T07:27:15.000Z"}],["meta",{"property":"article:author","content":"西风逍遥游"}],["meta",{"property":"article:modified_time","content":"2023-07-03T07:27:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LLVM函数的调用时声明插入\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-03T07:27:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"西风逍遥游\\",\\"url\\":\\"https://github.com/sunxfancy\\"}]}"]]},"headers":[],"git":{"createdTime":1688369235000,"updatedTime":1688369235000,"contributors":[{"name":"西风逍遥游","email":"sunxfancy@gmail.com","commits":1}]},"readingTime":{"minutes":0.69,"words":208},"filePathRelative":"LLVM指南/LLVM函数的调用时声明插入.md","localizedDate":"2023年7月3日","autoDesc":true}');export{t as data};
