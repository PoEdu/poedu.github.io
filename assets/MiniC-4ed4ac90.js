import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{i as _,r as l,o as h,I as m,w as t,a as o,d as e}from"./app-7fdc7960.js";const p=e("div",null," Consistent with real life: in line with the process and logic of real life, and comply with languages and habits that the users are used to; ",-1),f=e("div",null," Consistent within interface: all elements should be consistent, such as: design style, icons and texts, position of elements, etc. ",-1),g=e("div",null," Operation feedback: enable the users to clearly perceive their operations by style updates and interactive effects; ",-1),v=e("div",null," Visual feedback: reflect current state by updating or rearranging elements of the page. ",-1),b=e("div",null," Simplify the process: keep operating process simple and intuitive; ",-1),k=e("div",null," Definite and clear: enunciate your intentions clearly so that the users can quickly understand and make decisions; ",-1),y=e("div",null," Easy to identify: the interface should be straightforward, which helps the users to identify and frees them from memorizing and recalling. ",-1),C=e("div",null," Decision making: giving advices about operations is acceptable, but do not make decisions for the users; ",-1),w=e("div",null," Controlled consequences: users should be granted the freedom to operate, including canceling, aborting or terminating current operation. ",-1),V=e("div",null," Decision making: giving advices about operations is acceptable, but do not make decisions for the users; ",-1),x=e("div",null," Controlled consequences: users should be granted the freedom to operate, including canceling, aborting or terminating current operation. ",-1),q=e("div",null," Decision making: giving advices about operations is acceptable, but do not make decisions for the users; ",-1),D=e("div",null," Controlled consequences: users should be granted the freedom to operate, including canceling, aborting or terminating current operation. ",-1),M={__name:"MiniC",setup(B){const i=_(["1"]),r=s=>{console.log(s)};return(s,a)=>{const n=l("el-collapse-item"),c=l("el-collapse");return h(),m(c,{modelValue:i.value,"onUpdate:modelValue":a[0]||(a[0]=d=>i.value=d),onChange:r},{default:t(()=>[o(n,{title:"Input",name:"1"},{default:t(()=>[p,f]),_:1}),o(n,{title:"Tokens",name:"2"},{default:t(()=>[g,v]),_:1}),o(n,{title:"Parse Tree",name:"3"},{default:t(()=>[b,k,y]),_:1}),o(n,{title:"AST",name:"4"},{default:t(()=>[C,w]),_:1}),o(n,{title:"LLVM IR",name:"4"},{default:t(()=>[V,x]),_:1}),o(n,{title:"Assembly",name:"5"},{default:t(()=>[q,D]),_:1})]),_:1},8,["modelValue"])}}},T=u(M,[["__file","MiniC.vue"]]);export{T as default};
