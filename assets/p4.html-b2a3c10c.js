import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as d,c as i,a as l,d as e,e as c,f as r}from"./app-7fdc7960.js";const o={},t=e("h1",{id:"perfore-p4-教程",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#perfore-p4-教程","aria-hidden":"true"},"#"),c(" Perfore(P4) 教程")],-1),p=e("p",null,"P4 作为一款商业代码管理工具，受到了不少企业的欢迎。而学会使用这个工具往往是很多新员工的最痛苦的部分。",-1),h=e("p",null,"本文就简单梳理一下P4的核心概念以及如何正确使用这个工具。",-1),u=e("p",null,"P4 是集中管理代码的版本管理工具，所有代码都统一存放于公司的若干代码服务器节点上，而用户，需要创建一个client来访问代码，登录后，团队其他成员也能看到哪些文件正在被哪些人编辑中，更加方便团队的实时协作。",-1),v=r(`<p>一般一个用户有两种设置p4的方法：</p><ol><li>P4环境变量</li></ol><p>P4环境变量主要需要设置： <code>$P4PORT</code> 这个是你要访问的实例的名字,还有 <code>P4CLIENT</code> 这是你client客户端的名字</p><ol start="2"><li>.p4config</li></ol><p>使用配置文件，只需要设置一个环境变量 <code>$P4CONFIG</code> 为 <code>.p4config</code> 使用配置文件的好处是，你可以把这个配置文件放到workspace里，不同的workspace的不同配置互不影响，可以每个项目设置独立的client（这也是推荐做法），非常方便</p><h2 id="编辑client" tabindex="-1"><a class="header-anchor" href="#编辑client" aria-hidden="true">#</a> 编辑client</h2><p>输入p4 client 就会自动弹出一个客户端配置文件的编辑器，重要的配置有以下几个：</p><ul><li>Root: 代码仓库的位置</li><li>View: 一组目录映射的配置，由于公司的项目都很大，每个人只需要关心一小部分代码，你可以只签出你关心的几个项目</li></ul><h2 id="同步代码" tabindex="-1"><a class="header-anchor" href="#同步代码" aria-hidden="true">#</a> 同步代码</h2><p>同步所有代码很简单</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>p4 <span class="token function">sync</span> //<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然你直接 <code>p4 sync</code> 是同步当前目录</p><h2 id="代码修改" tabindex="-1"><a class="header-anchor" href="#代码修改" aria-hidden="true">#</a> 代码修改</h2><p>默认签出的代码全部都是readonly的。如果你想修改一个文件，必须先改变其状态:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>p4 edit <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个edit指令会告诉服务器，你现在要开始编辑这个文件了，这个状态是能被公司其他人看到的，那么别人看你在编辑这个文件后，就会考虑是不是等你这边更新完后他们再改。这样可以避免一些提交时的冲突。</p><p>添加和删除文件也有专门的指令<code>p4 add</code>和<code>p4 delete</code>。</p><h2 id="创建changelist" tabindex="-1"><a class="header-anchor" href="#创建changelist" aria-hidden="true">#</a> 创建changelist</h2><p>开始工作后，基本上就要创建一个个的changelist。p4是基于修改的版本管理器，你只能通过创建一个个changelist来修改代码。你的所有修改都是在默认的changelist里发生的，等到你完成了一段代码修改，那么你可以运行：</p><p><code>p4 change</code></p><p>这样会出来一个文本编辑器，就像git commit一样，这时你的changelist就会获得一个唯一的id编号，方便日后你追踪这个修改。但注意，这时代码并没有提交。虽然服务器上能看到你编辑了哪些文件，但文件的具体内容还未上传。</p><h2 id="暂存修改-shelve" tabindex="-1"><a class="header-anchor" href="#暂存修改-shelve" aria-hidden="true">#</a> 暂存修改(shelve)</h2><p>你可以暂存你的修改到服务器上，这个功能非常常用，可以让你把一个工作做完后放在一边，然后你可以去干别的事情。一般code reivew也会使用shelve功能，你shelve的代码如果标记要review后，同事会受到提醒。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ p4 shelve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="提交代码-submit" tabindex="-1"><a class="header-anchor" href="#提交代码-submit" aria-hidden="true">#</a> 提交代码(submit)</h2><p>在你完成测试，review，修改，再review，再测试，最后没有问题时，你的changelist终于可以提交了。那么你可以使用 <code>p4 submit</code>将代码提交到代码仓库里，这时别人<code>sync</code>指令就能获取到你的代码了。</p><p>要注意，提交代码有可能成功，也可能不成功，因为期间有可能有别人修改了你的代码，你必须resolve冲突后才能成功提交。不过，代码提交是事务的，要么全提交，要么全拒绝。</p><p>一般情况下，因为你要先shelve代码进行code review，所以你提交时必须先把shelved代码delete掉。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ p4 shelve <span class="token parameter variable">-c</span> <span class="token operator">&lt;</span>changelist_id<span class="token operator">&gt;</span> <span class="token parameter variable">-d</span>
$ p4 submit <span class="token parameter variable">-c</span> <span class="token operator">&lt;</span>changelist_id<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="检查一个文件是否是被p4托管" tabindex="-1"><a class="header-anchor" href="#检查一个文件是否是被p4托管" aria-hidden="true">#</a> 检查一个文件是否是被p4托管</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>p4 files <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,31);function m(b,g){const a=n("Mermaid");return d(),i("div",null,[t,p,h,u,l(a,{id:"mermaid-12",code:"eJxzNnHOzytJrSjhUlAoySzJSVUISC1Kyy9KTlVwzk9JVQhLLSrOzM9T8E3MS0xPzU3NK1EIriwuSc3l4gLqcAVqLSooyixOjXfKL81LSSyq1Cgoyq+o1FEKMFF4snvy012TlTQVqoFKQQCiM7A0tTQVosxQRwGscNesZ1s2Pdm9+PmEtmdzep92LXw6c4WSJi5dRhBdz9YsJ0WXMUTX8319WHWhaEP4JjOvuCQxLzkV7CFPKKcYyU8ITS5JcNUgf8EUG8KdhFUpyDMwpUZwpbVAuhbkJmBsFOfnaaSkljnqKD3d0/C0f+KLhlZHsEKEnBOSnBOanDOSnDPEo0GpORATFeCx8GLd/pfT14G1QmWd8Mo6Q2VBzofLAqWdMkEKYBqRwwOsG7s0yBAM7UBBfNqRpLFqB0Y3Pu1I0lDtAJnOE9Y="}),v])}const x=s(o,[["render",m],["__file","p4.html.vue"]]);export{x as default};
