import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c as t,b as o,d as e,e as a,a as d,f as p}from"./app-7fdc7960.js";const c={},r=e("h1",{id:"使用sphinx翻译llvm的中文文档",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用sphinx翻译llvm的中文文档","aria-hidden":"true"},"#"),a(" 使用Sphinx翻译LLVM的中文文档")],-1),h=e("p",null,"Sphinx是一款非常方便的文档生成工具，以前就早有耳闻，最近计划将LLVM的文档翻译一些，在打开LLVM的文档源文件后发现，整个文档部分整理的非常整洁。下载的最新版LLVM-3.8版的源码，已经完全使用Sphinx生成文档，于是我也学习了一些Sphinx的相关用法。",-1),u=p(`<p>Sphinx是python编写的一款命令行工具，在python3或python2下都能正常的工作，安装可以使用流行的pip进行安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pip <span class="token function">install</span> sphinx <span class="token parameter variable">--upgrade</span>
$ pip <span class="token function">install</span> sphinx-intl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Sphinx的依赖项比较新，最好还是更新一下比较好。<code>sphinx-intl</code>是一个命令行工具，用来实现多语言翻译的。</p><p>Sphinx有着非常独特且方便的代码翻译模型，可以用工具将英语版编写的文档中的文字全部抽取出来，在<code>.po</code>文件下，可以让用户方便地进行修改和翻译。最后根据生成时的语言配置，构建对应语言版本的文档。</p><p><img src="http://www.sphinx-doc.org/en/stable/_images/translation.png" alt="sphinx i18n model"></p><p>不过我们先不管Sphinx是如何进行翻译抽取的，先来看下LLVM文档的构建。</p><h2 id="基本html文档的构建" tabindex="-1"><a class="header-anchor" href="#基本html文档的构建" aria-hidden="true">#</a> 基本HTML文档的构建</h2><p>默认LLVM的docs目录下的makefile是给doxygen使用的，这里我将<code>Makefile.sphinx</code>改成默认的makefile。这样接下来的命令中，都不会再出现对于原版<code>-f Makefile.sphinx</code>参数了。</p><p>首先对于构建html版本，非常简单，直接make默认参数即可，或者<code>make html</code>都可以。</p><p>这样，会在<code>_build</code>目录下生成对应的网站文件夹。</p><p>这样构建的文档，是可以作为静态网站直接发布出去的，不过发布到github上的gitpages上还是会有点问题，我们这里先不谈，接下来的发布注意中再细说。</p><h2 id="抽取文档中的文本并开始翻译" tabindex="-1"><a class="header-anchor" href="#抽取文档中的文本并开始翻译" aria-hidden="true">#</a> 抽取文档中的文本并开始翻译</h2><p>我们的目标是翻译，将英文文档尽可能正确无误地转换为中文文档。这里我们使用<code>sphinx-intl</code>工具进行翻译。</p><ol><li><p>首先配置<code>conf.py</code>文件 <code>conf.py</code>是sphinx的配置文件，我们需要为其增加国际化翻译文件夹：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>language <span class="token operator">=</span> <span class="token string">&#39;zh_CN&#39;</span> <span class="token comment"># language supported</span>
locale_dirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;locale/&#39;</span><span class="token punctuation">]</span>   <span class="token comment"># path is example but recommended.</span>
gettext_compact <span class="token operator">=</span> <span class="token boolean">False</span>     <span class="token comment"># optional.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>抽取需要转换的文本到pot文件列表中 执行如下指令即可：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">make</span> gettext
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这时，会在<code>_build</code>目录出现一个<code>locale</code>文件夹，是抽取出的全部文本段。</p></li><li><p>更新对应语言的版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ sphinx-intl update <span class="token parameter variable">-p</span> _build/locale <span class="token parameter variable">-l</span> zh_CN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>手动翻译抽取后的文段 这时，我们将可以在<code>locale</code>目录，注意，是文档项目根目录下的<code>locale</code>，这才是我们要翻译文本的<code>.po</code>文件夹。里面内容大概如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#: ../../builders.rst:4
msgid &quot;Available builders&quot;
msgstr &quot;&lt;一些你要翻译的汉语&gt;&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>msgid和msgstr一对一句，是全部抽取出来的文本的翻译，只要你对应翻译，注意rst文件的格式，翻译出来很少会出问题，样式完全一致，而且链接不会错乱。</p></li><li><p>构建新版文档 由于我们在<code>conf.py</code>下配置了默认的language，所以只要这时再重新make，项目文档就生成成中文版的了。</p></li></ol><h2 id="看下效果" tabindex="-1"><a class="header-anchor" href="#看下效果" aria-hidden="true">#</a> 看下效果</h2><p>今天一下午研究sphinx+晚上翻译，将LLVM官网首页翻译了个大概，有兴趣的朋友可以看下我发布到gitpages上的中文文档：</p>`,16),m={href:"http://sunxfancy.github.io/llvm-cn/",target:"_blank",rel:"noopener noreferrer"},g=e("p",null,"另外英语好且正在使用LLVM的朋友，欢迎一同和我来翻译这个项目，给更多人带来便利。",-1),v=e("h2",{id:"发布项目的小问题",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#发布项目的小问题","aria-hidden":"true"},"#"),a(" 发布项目的小问题")],-1),b=e("p",null,[a("之前我们提到，发布到gitpages出些问题，所有"),e("code",null,"_static"),a("等带"),e("code",null,"_"),a("前缀的文件夹无法访问，思考了一下，觉得是github本身的问题，在看sphinx文档的时候，发现提到了一个文件，必须同时发布到gitpages上。")],-1),_=e("p",null,[e("code",null,".nojekyll"),a(",这个空的小文件十分重要，因为它直接关系着github上的解析规则，加上这个空文件，gitpages就会停止默认的过滤规则，运行我们的资源文件的访问。")],-1);function x(k,f){const n=i("ExternalLinkIcon");return l(),t("div",null,[r,h,o("more"),u,e("p",null,[e("a",m,[a("http://sunxfancy.github.io/llvm-cn/"),d(n)])]),g,v,b,_])}const y=s(c,[["render",x],["__file","使用Sphinx翻译LLVM的中文文档.html.vue"]]);export{y as default};
