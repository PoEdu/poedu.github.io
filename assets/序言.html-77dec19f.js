import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c as s,a as i,w as a,e as t,f as c,d as e}from"./app-7fdc7960.js";const d={},_=c('<h1 id="minic-编译器" tabindex="-1"><a class="header-anchor" href="#minic-编译器" aria-hidden="true">#</a> MiniC 编译器</h1><p>欢迎来到编译器训练营！这是一个简单版的C语言项目，当然你也可以自行添加一系列高级功能，打造你心目中理想的编程语言。</p><p>在这个实验中，你将学到：</p><ol><li>手工编写词法分析器和语法分析器</li><li>编译型语言的语法树模型</li><li>对语法树进行语义分析和类型检查</li><li>生成LLVM IR</li><li>调用链接器和链接C库</li><li>生成调试信息</li></ol><p>在这个实验中，我们推荐你使用VSCode作为开发工具，Linux作为开发环境。Windows的用户可以选择使用WSL安装一个Ubuntu子系统。当然你也可以选择从Github上下载模板，选择你喜欢的编辑器和开发环境。 这里我们还提供了一个全功能的网页端调试器帮助你可视化编译期间的各种信息，你可以点击下面的按钮来打开它。</p>',5),u=e("h2",{id:"项目阶段",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#项目阶段","aria-hidden":"true"},"#"),t(" 项目阶段")],-1),h=e("ol",null,[e("li",null,"你将完成一个简单的词法分析器，将输入的字符串切分成token序列。"),e("li",null,"完成一个手工的递归向下的语法分析器，将token序列构造成语法树。"),e("li",null,"完成一个简单的语义分析器，遍历语法树，生成中间代码。"),e("li",null,"你将对语义分析增加类型检查，检查变量的类型是否匹配。"),e("li",null,"你将调用LLVM库，将LLVM IR编译成目标文件，并完成链接。")],-1);function f(p,m){const l=o("el-button");return r(),s("div",null,[_,i(l,{type:"primary",href:""},{default:a(()=>[t("在VSCode中打开")]),_:1}),i(l,{type:"info",href:""},{default:a(()=>[t("打开Github")]),_:1}),i(l,{type:"success",tag:"a",href:"Debug.html"},{default:a(()=>[t("打开调试器")]),_:1}),u,h])}const x=n(d,[["render",f],["__file","序言.html.vue"]]);export{x as default};
