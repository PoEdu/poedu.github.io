import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-7fdc7960.js";const e={},p=t(`<h1 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h1><p>数组是一切数据结构的起点，或者说，在计算机世界里，唯一被硬件支持的数据结构就是数组，因为内存的模型就是一个巨大的可以被随机读写的数组，如何合理的划分，组织，就成为了数据结构研究的内容。</p><h2 id="数组的定义" tabindex="-1"><a class="header-anchor" href="#数组的定义" aria-hidden="true">#</a> 数组的定义</h2><p><strong>数组</strong>是一种线性数据结构，它用一组连续的内存空间，来存储一组具有相同类型的数据。元素在数组中的位置被称为<strong>索引</strong>或<strong>数组下标</strong>，一般在C/C++等编程语言中，第一个元素的索引为0，第二个元素的索引为1，以此类推。划分给数组的大小往往是固定的，被称为<strong>数组的容量</strong>，而实际存放的元素个数，被称为<strong>数组的长度</strong>。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 存储在栈上</span>
<span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 存储在堆上</span>
<span class="token keyword">int</span><span class="token operator">*</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组的操作" tabindex="-1"><a class="header-anchor" href="#数组的操作" aria-hidden="true">#</a> 数组的操作</h2><p>访问数组，如果我们知道了数组的起始地址，已经存放的元素大小，那么就可以快速计算出任意元素的地址，从而快速访问任意元素。这种访问方式被称为<strong>随机访问</strong>，因为我们可以随机访问任意元素。</p>`,7),o=[p];function c(r,l){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","数组.html.vue"]]);export{k as default};
