import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,f as s}from"./app-7fdc7960.js";const c={},o=s(`<h1 id="正则表达式-regex" tabindex="-1"><a class="header-anchor" href="#正则表达式-regex" aria-hidden="true">#</a> 正则表达式（Regex）</h1><p>正则表达式是一种常用的字符串匹配技术，正则表达式可以简单的规则描述正则文法，用来匹配很多常见的字符串。</p><h3 id="从实用角度出发" tabindex="-1"><a class="header-anchor" href="#从实用角度出发" aria-hidden="true">#</a> 从实用角度出发</h3><p>试想，假如你正在写一个在线应用，如果你要编写一段代码来检测用户输入的邮箱是否为学校email，即结尾为.edu的邮箱，用来判断您的网站是否应该给他一个学生优惠价格。 一种简单的校验方法可能是编写一段代码来匹配：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token comment">// a function to match edu email</span>
    <span class="token keyword">function</span> <span class="token function">isEduEmail</span><span class="token punctuation">(</span><span class="token parameter">email</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bool endWithEdu <span class="token operator">=</span> email<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.edu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bool includeAt <span class="token operator">=</span> email<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;@&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> endWithEdu <span class="token operator">&amp;&amp;</span> includeAt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码其实是有问题的，因为其并不能保证这个邮箱是合法的，比如<code>@</code>符号前面没有字符<code>@abc.edu</code>，或者@后面直接跟.edu <code>xxx@.edu</code>。</p><p>一种更好的方式是去描述邮箱的文法规则:</p><p>&lt;email_user&gt;@&lt;email_domain&gt;.edu[.cn]</p><p>其中<code>&lt;email_user&gt;</code>是由字母、数字、下划线、点号组成的字符串，不能为空，<code>&lt;email_domain&gt;</code>是由字母、数字组成的字符串，也不能为空。最后还有可选的<code>.cn</code>后缀。</p><p>那么，一种简便地描述该文法的表示方法就是正则表达式:</p><p>/[A-Za-z0-9_.]+@[A-Za-z0-9]+.edu(.cn)?/</p><p>其中<code>[A-Za-z0-9_.]+</code>表示一个由字母、数字、下划线、点号组成的字符串，<code>@</code>表示一个<code>@</code>符号，<code>[A-Za-z0-9]+</code>表示一个由字母、数字组成的字符串，<code>\\.</code>表示一个点号，<code>edu</code>表示一个<code>edu</code>字符串，<code>(\\.cn)?</code>表示一个可选的<code>.cn</code>字符串。\`</p><p>这里<code>\\.</code>要用转义字符来表示<code>.</code>字符，是因为<code>.</code>在正则表达式中有特殊含义，表示任意非换行字符。</p><h3 id="正则表达式的规范表述" tabindex="-1"><a class="header-anchor" href="#正则表达式的规范表述" aria-hidden="true">#</a> 正则表达式的规范表述</h3><h3 id="正则表达式在词法分析中的应用" tabindex="-1"><a class="header-anchor" href="#正则表达式在词法分析中的应用" aria-hidden="true">#</a> 正则表达式在词法分析中的应用</h3><p>词法分析器的生成工具，如flex，re2c等，都是让用户定义一系列有优先级的正则表达式列表。而词法分析器会根据这个列表进行匹配，选择最长，最高优先级的匹配结果。 而每个正则式匹配后，都可以触发对应的动作，从而可以用来生成一个对应的token。</p>`,16),t=[o];function d(p,i){return a(),e("div",null,t)}const r=n(c,[["render",d],["__file","正则表达式.html.vue"]]);export{r as default};
