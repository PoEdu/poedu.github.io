import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c as l,d as n,e as s,a as c,f as a}from"./app-7fdc7960.js";const i="/assets/done-8628d268.png",u={},d=a('<h1 id="编译器架构的王者llvm——-3-用代码生成代码" tabindex="-1"><a class="header-anchor" href="#编译器架构的王者llvm——-3-用代码生成代码" aria-hidden="true">#</a> 编译器架构的王者LLVM——（3）用代码生成代码</h1><h2 id="用代码生成代码" tabindex="-1"><a class="header-anchor" href="#用代码生成代码" aria-hidden="true">#</a> 用代码生成代码</h2><p>LLVM的开发思路很简单，就是用C++代码去不断生成llvm字节码。</p><h3 id="redapple语言示例" tabindex="-1"><a class="header-anchor" href="#redapple语言示例" aria-hidden="true">#</a> RedApple语言示例</h3><p>这是我花了两周多的时间制作的一门实验型语言，主要是想验证一个编译器的设计思路，宏翻译系统。 它的架构和一般的编译器很不一样，首先，编译器前端会先将语法转换为很通用的AST语法树节点，一般的编译器，往往是直接在这些节点上进行语义分析，然后进行代码生成。 这次我采用了类似lisp的表示方法，将源文件转换为语法树，然后遍历整棵语法树，根据上面标注的宏提示，去按照各个宏的规则进行翻译工作。</p><p>整个编译器1500行左右的代码，非常的小巧，不过功能也比较有限，而且好多地方还不完善，主要支持的就是函数的定义，结构体的定义，函数调用，结构体访问，分配内存，基本逻辑控制语句这些基本的特性。</p>',6),r={href:"https://github.com/sunxfancy/RedApple",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>同样，非常精品的示例还推荐大家看以下两位网友写的：</p><p>构建Toy编译器：基于Flex、Bison和LLVM http://lesliezhu.github.io/public/write-your-toy-compiler.html</p><p>用LLVM来开发自己的编译器系列 http://my.oschina.net/linlifeng/blog/97457</p><p>当然，这些示例不是说要大家一下都看懂，那么也就没有教程的意义了，下面我会继续介绍各个关键的LLVM平台API以及相关工具链。大家可以将以上三个项目和LLVM官网example中的作为参考，在实践中加以印证。</p><h3 id="工具链简介" tabindex="-1"><a class="header-anchor" href="#工具链简介" aria-hidden="true">#</a> 工具链简介</h3><table><thead><tr><th>工具</th><th>功能</th></tr></thead><tbody><tr><td>clang -emit-llvm</td><td>指令，可以生成.bc的字节码文件</td></tr><tr><td>lli</td><td>llvm解释器，直接执行.bc字节码文件</td></tr><tr><td>llc</td><td>llvm编译器，将.bc编译成.o</td></tr></tbody></table><p>以上三个最常用，其他小工具备用</p><table><thead><tr><th>工具</th><th>功能</th></tr></thead><tbody><tr><td>llvm-as</td><td>汇编器</td></tr><tr><td>llvm-dis</td><td>反汇编器</td></tr><tr><td>llvm-ar</td><td>打包器</td></tr><tr><td>llvm-link</td><td>字节码链接器</td></tr></tbody></table><p>唉，太多了，好多我也木有用过，还有需要的请查看官方文档： http://llvm.org/docs/CommandGuide/index.html</p><h3 id="常用类" tabindex="-1"><a class="header-anchor" href="#常用类" aria-hidden="true">#</a> 常用类</h3><table><thead><tr><th>LLVM类</th><th>功能</th></tr></thead><tbody><tr><td>LLVMContext</td><td>上下文类，基本是最核心的保存上下文符号的类</td></tr><tr><td>Module</td><td>模块类，一般一个文件是一个模块，里面有函数列表和全局变量表</td></tr><tr><td>Function</td><td>函数类，函数类，生成出来就是一个C函数</td></tr><tr><td>Constant</td><td>常量类，各种常量的定义，都是从这里派生出来的</td></tr><tr><td>Value</td><td>各值类型的基类，几乎所以的函数、常量、变量、表达式，都可以转换成Value型</td></tr><tr><td>Type</td><td>类型类，表示各种内部类型或用户类型，每一个Value都有个getType方法来获取其类型。</td></tr><tr><td>BasicBlock</td><td>基本块，一般是表示一个标签，注意这个块不是嵌套形式的结构，而是每个块结尾可以用指令跳转 到其他块，类似C语言中的标签的功能</td></tr></tbody></table><h3 id="尝试先来生成个小函数" tabindex="-1"><a class="header-anchor" href="#尝试先来生成个小函数" aria-hidden="true">#</a> 尝试先来生成个小函数</h3><p>就拿printf开练吧，这个函数第一有用，第二简单，第三只要声明不要内容。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">register_printf</span><span class="token punctuation">(</span>llvm<span class="token double-colon punctuation">::</span>Module <span class="token operator">*</span><span class="token keyword">module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>llvm<span class="token double-colon punctuation">::</span>Type<span class="token operator">*</span><span class="token operator">&gt;</span> printf_arg_types<span class="token punctuation">;</span> <span class="token comment">// 这里是参数表</span>
    printf_arg_types<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>llvm<span class="token double-colon punctuation">::</span><span class="token class-name">Type</span><span class="token double-colon punctuation">::</span><span class="token function">getInt8PtrTy</span><span class="token punctuation">(</span><span class="token keyword">module</span><span class="token operator">-&gt;</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    llvm<span class="token double-colon punctuation">::</span>FunctionType<span class="token operator">*</span> printf_type <span class="token operator">=</span>
        llvm<span class="token double-colon punctuation">::</span><span class="token class-name">FunctionType</span><span class="token double-colon punctuation">::</span><span class="token function">get</span><span class="token punctuation">(</span>
            llvm<span class="token double-colon punctuation">::</span><span class="token class-name">Type</span><span class="token double-colon punctuation">::</span><span class="token function">getInt32Ty</span><span class="token punctuation">(</span><span class="token keyword">module</span><span class="token operator">-&gt;</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> printf_arg_types<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token comment">// 这里的true表示后面接不定参数</span>

    llvm<span class="token double-colon punctuation">::</span>Function <span class="token operator">*</span>func <span class="token operator">=</span> llvm<span class="token double-colon punctuation">::</span><span class="token class-name">Function</span><span class="token double-colon punctuation">::</span><span class="token function">Create</span><span class="token punctuation">(</span>
                printf_type<span class="token punctuation">,</span> llvm<span class="token double-colon punctuation">::</span>Function<span class="token double-colon punctuation">::</span>ExternalLinkage<span class="token punctuation">,</span>
                llvm<span class="token double-colon punctuation">::</span><span class="token function">Twine</span><span class="token punctuation">(</span><span class="token string">&quot;printf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">module</span>
           <span class="token punctuation">)</span><span class="token punctuation">;</span>
    func<span class="token operator">-&gt;</span><span class="token function">setCallingConv</span><span class="token punctuation">(</span>llvm<span class="token double-colon punctuation">::</span>CallingConv<span class="token double-colon punctuation">::</span>C<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一定注意调用方式的正确性</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>怎么样，是不是也很简单？</p><h3 id="编写主函数和调试上下文" tabindex="-1"><a class="header-anchor" href="#编写主函数和调试上下文" aria-hidden="true">#</a> 编写主函数和调试上下文</h3><p>下面我们来编写一个主函数，来测试一下我们的函数是否正确，这里，也是LLVM最核心的启动和调试流程。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>int main(){
	InitializeNativeTarget();
    LLVMContext Context;
    Module* M = new Module(&quot;main&quot;, Context);

    register_printf(M);

    // 校验问题, 这个函数需要一个输出流来打印错误信息
	if (verifyModule(*M, &amp;errs())) {
		errs() &lt;&lt; &quot;构建LLVM字节码出错!\\n&quot;;
		exit(1);
	}

	// 输出llvm字节码
	outs() &lt;&lt; &quot;LLVM module:\\n\\n&quot; &lt;&lt; *M;
    outs() &lt;&lt; &quot;\\n\\n&quot;;
    outs().flush();

    // 输出二进制BitCode到.bc文件
	std::error_code ErrInfo;
	raw_ostream *out = new raw_fd_ostream(&quot;a.bc&quot;, ErrInfo, sys::fs::F_None);
	WriteBitcodeToFile(M, *out);
	out-&gt;flush(); delete out;

	// 关闭LLVM释放内存
	llvm_shutdown();
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果： <img src="`+i+`" alt=""></p><p>对了，我们好像没有提该引用哪些头文件，请见附录</p><h3 id="附-完整示例" tabindex="-1"><a class="header-anchor" href="#附-完整示例" aria-hidden="true">#</a> 附：完整示例</h3><p>只是头文件有点长，具体功能有的我也记不清了，一般我是习惯性把一片粘过去 →_→</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
<span class="token comment">/* 
* @Author: sxf
* @Date:   2015-11-06 20:37:15
* @Last Modified by:   sxf
* @Last Modified time: 2015-11-06 20:46:43
*/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;llvm/IR/Verifier.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;llvm/ExecutionEngine/GenericValue.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;llvm/ExecutionEngine/Interpreter.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;llvm/IR/Constants.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;llvm/IR/DerivedTypes.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;llvm/IR/Instructions.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;llvm/IR/LLVMContext.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;llvm/IR/Module.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;llvm/IR/IRBuilder.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;llvm/Support/ManagedStatic.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;llvm/Support/TargetSelect.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;llvm/Support/raw_ostream.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;llvm/Bitcode/ReaderWriter.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;llvm/Support/FileSystem.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;llvm/IR/ValueSymbolTable.h&quot;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> llvm<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">register_printf</span><span class="token punctuation">(</span>llvm<span class="token double-colon punctuation">::</span>Module <span class="token operator">*</span><span class="token keyword">module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>llvm<span class="token double-colon punctuation">::</span>Type<span class="token operator">*</span><span class="token operator">&gt;</span> printf_arg_types<span class="token punctuation">;</span>
    printf_arg_types<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>llvm<span class="token double-colon punctuation">::</span><span class="token class-name">Type</span><span class="token double-colon punctuation">::</span><span class="token function">getInt8PtrTy</span><span class="token punctuation">(</span><span class="token keyword">module</span><span class="token operator">-&gt;</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    llvm<span class="token double-colon punctuation">::</span>FunctionType<span class="token operator">*</span> printf_type <span class="token operator">=</span>
        llvm<span class="token double-colon punctuation">::</span><span class="token class-name">FunctionType</span><span class="token double-colon punctuation">::</span><span class="token function">get</span><span class="token punctuation">(</span>
            llvm<span class="token double-colon punctuation">::</span><span class="token class-name">Type</span><span class="token double-colon punctuation">::</span><span class="token function">getInt32Ty</span><span class="token punctuation">(</span><span class="token keyword">module</span><span class="token operator">-&gt;</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> printf_arg_types<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    llvm<span class="token double-colon punctuation">::</span>Function <span class="token operator">*</span>func <span class="token operator">=</span> llvm<span class="token double-colon punctuation">::</span><span class="token class-name">Function</span><span class="token double-colon punctuation">::</span><span class="token function">Create</span><span class="token punctuation">(</span>
                printf_type<span class="token punctuation">,</span> llvm<span class="token double-colon punctuation">::</span>Function<span class="token double-colon punctuation">::</span>ExternalLinkage<span class="token punctuation">,</span>
                llvm<span class="token double-colon punctuation">::</span><span class="token function">Twine</span><span class="token punctuation">(</span><span class="token string">&quot;printf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">module</span>
           <span class="token punctuation">)</span><span class="token punctuation">;</span>
    func<span class="token operator">-&gt;</span><span class="token function">setCallingConv</span><span class="token punctuation">(</span>llvm<span class="token double-colon punctuation">::</span>CallingConv<span class="token double-colon punctuation">::</span>C<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">InitializeNativeTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    LLVMContext Context<span class="token punctuation">;</span>
    Module<span class="token operator">*</span> M <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Module</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> Context<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">register_printf</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 校验问题, 这个函数需要一个输出流来打印错误信息</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">verifyModule</span><span class="token punctuation">(</span><span class="token operator">*</span>M<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token function">errs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">errs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;构建LLVM字节码出错!\\n&quot;</span><span class="token punctuation">;</span>
		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 输出llvm字节码</span>
	<span class="token function">outs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;LLVM module:\\n\\n&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>M<span class="token punctuation">;</span>
    <span class="token function">outs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token function">outs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 输出二进制BitCode到.bc文件</span>
	std<span class="token double-colon punctuation">::</span>error_code ErrInfo<span class="token punctuation">;</span>
	raw_ostream <span class="token operator">*</span>out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">raw_fd_ostream</span><span class="token punctuation">(</span><span class="token string">&quot;a.bc&quot;</span><span class="token punctuation">,</span> ErrInfo<span class="token punctuation">,</span> sys<span class="token double-colon punctuation">::</span>fs<span class="token double-colon punctuation">::</span>F_None<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">WriteBitcodeToFile</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> <span class="token operator">*</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
	out<span class="token operator">-&gt;</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">delete</span> out<span class="token punctuation">;</span>

	<span class="token comment">// 关闭LLVM释放内存</span>
	<span class="token function">llvm_shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23);function v(m,b){const t=p("ExternalLinkIcon");return o(),l("div",null,[d,n("p",null,[s("大家可以作为学习llvm的一个示例吧。 Github地址："),n("a",r,[s("https://github.com/sunxfancy/RedApple"),c(t)])]),k])}const y=e(u,[["render",v],["__file","编译器架构的王者LLVM——（3）用代码生成代码.html.vue"]]);export{y as default};
